
"""#Result"""

import matplotlib.pyplot as plt
import os
import numpy as np
import pickle
from matplotlib.ticker import StrMethodFormatter


names = ['Xception','Mobilenet','VGG19','Inception','InceptionResnet','EfficientNet']
def standard_training_loss_fig():
    for name in names:
        current_model_name = name
        fig_path = os.path.join('./fig', current_model_name + '/')
        if not os.path.exists(fig_path):
            os.makedirs(fig_path)
        with open('./saved-history/' + current_model_name, "rb") as file_pi:
            history = pickle.load(file_pi)

        # Accuracy & Loss

        plt.plot(history['accuracy'])
        plt.plot(history['val_accuracy'])
        plt.title('model accuracy -' + current_model_name)
        plt.ylabel('accuracy')
        plt.xlabel('epoch')
        plt.gca().yaxis.set_major_formatter(StrMethodFormatter('{x:,.3f}'))  # 3 decimal places
        plt.legend(['train', 'validation'], loc='upper left')
        plt.savefig(fig_path + 'accuracy.png')
        plt.show()
        # loss
        plt.plot(history['loss'])
        plt.plot(history['val_loss'])
        plt.title('model loss - ' + current_model_name)
        plt.gca().yaxis.set_major_formatter(StrMethodFormatter('{x:,.3f}'))  # 3 decimal places
        plt.ylabel('loss')
        plt.xlabel('epoch')
        plt.legend(['train', 'validation'], loc='upper left')
        plt.savefig(fig_path + 'loss.png')
        plt.show()
        # Precision, Recall, Macro F1 score
        val_recall = history['val_recall']
        avg_recall = np.mean(val_recall)
        avg_recall

        val_precision = history['val_precision']
        avg_precision = np.mean(val_precision)
        avg_precision

        Train_accuracy = history['accuracy']

        epochs = range(1, len(Train_accuracy) + 1)
        plt.figure(figsize=(12, 6))
        plt.plot(epochs, val_recall, 'g', label='Validation Recall')
        plt.plot(epochs, val_precision, 'b', label='Validation Prcision')
        plt.gca().yaxis.set_major_formatter(StrMethodFormatter('{x:,.2f}'))  # 3 decimal places
        plt.title('Validation recall and Validation Percision - ' + current_model_name)
        plt.xlabel('Epochs')
        plt.ylabel('Recall and Precision')
        plt.legend()
        plt.ylim(0, 1)
        plt.savefig(fig_path + 'PercisionRecall.png')
        plt.show()
def printTrainingTimeComparison():
    # time of small dataset full arch
    inception =  [38.65020561218262, 28.921536922454834, 27.504807233810425, 27.353906631469727, 27.354594469070435, 27.530613899230957, 28.730541944503784]
    a = np.array(inception)
    print("inception:", a.mean(),a.size)
    inceptionresnet = [47.4307017326355, 30.540064334869385, 31.616018772125244, 29.448077917099, 29.899202823638916, 30.875032901763916, 29.565789699554443, 28.96509337425232, 28.160375356674194, 30.06164264678955, 28.072290182113647, 28.874943733215332, 27.58052706718445, 28.084041595458984, 27.856014490127563, 28.75667381286621, 27.731321573257446, 28.39872908592224, 28.06021499633789, 27.874722957611084, 27.820794105529785, 28.86209464073181, 27.854198694229126, 27.692315101623535, 28.439990520477295, 28.41619610786438, 28.50485396385193, 29.49497365951538]
    a = np.array(inceptionresnet)
    print("inceptionresnet:", a.mean(),a.size)
    mobilenet =[38.04026412963867, 28.22040343284607, 27.89033603668213, 27.75237250328064, 27.849269151687622, 27.381730794906616, 28.16930603981018, 27.389326333999634, 27.789839506149292, 27.33990240097046, 27.440694332122803, 27.50923800468445, 27.14223837852478, 27.883106231689453, 27.715942859649658]
    a = np.array(mobilenet)
    print("mobilenet:", a.mean(),a.size)
    VGG = [69.53351616859436, 40.32814121246338, 38.657081842422485, 39.446167945861816, 40.8878538608551, 38.27776861190796, 37.21105194091797, 38.822980642318726, 40.37672209739685, 38.612780809402466, 39.81270360946655, 39.25251317024231]
    a = np.array(VGG)
    print("VGG:", a.mean(),a.size)
    xception = [39.98339033126831, 34.77541208267212, 34.010133266448975, 32.53474760055542, 31.347946882247925, 34.98439407348633, 31.687389135360718, 31.75589895248413, 33.06009864807129, 33.682995557785034, 30.565119743347168, 30.04577612876892, 31.545610904693604, 35.32195520401001, 32.48444652557373, 33.16444396972656, 33.08367657661438, 31.79291033744812, 33.38029503822327, 32.17587661743164, 30.875550270080566]
    a = np.array(xception)
    print("xception:", a.mean(),a.size)
    efficientNet = [124,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,100]
    a = np.array(efficientNet)
    print("efficientNet:", a.mean(),a.size)
    print("=======================")
    # time of small dataset simple arch
    mobilenet_2 = [39.27234673500061, 28.417423248291016, 32.78204298019409, 28.286015510559082, 27.84517216682434, 27.368001461029053, 28.271999835968018, 28.31302309036255, 27.902698278427124, 27.8254816532135, 27.870055198669434, 28.404197692871094, 27.498613834381104, 28.307915210723877, 28.67883801460266, 28.7395920753479, 28.799826622009277, 28.582157135009766, 29.065090894699097, 29.33698296546936, 27.527028560638428, 28.233583450317383, 28.466222047805786, 27.363317012786865, 27.92161750793457, 28.00078535079956, 29.7232768535614, 30.317997932434082, 28.024945735931396, 28.808758020401, 27.56839942932129, 27.883483171463013, 27.852610111236572, 28.660715579986572]
    a = np.array(mobilenet_2)
    print("mobilenet_2:", a.mean(),a.size)
    inceptionresnet_2 = [43.6520037651062, 30.31569266319275, 29.853055477142334, 29.099285125732422, 29.579365015029907, 28.512669801712036, 28.693130016326904, 28.67629909515381, 28.953344583511353, 28.675833225250244, 28.557076454162598, 27.81908917427063, 29.505276203155518, 29.951964855194092, 31.282516956329346, 31.08937096595764, 30.073999166488647, 28.551904916763306, 28.38713049888611, 27.944122552871704, 28.06400465965271,28.06400465965271, 28.06400465965271,28.06400465965271,28.06400465965271,28.06400465965271,28.06400465965271]
    a = np.array(inceptionresnet_2)
    print("inceptionresnet_2:", a.mean(),a.size)
    inception_2 =  [44.016430616378784, 28.527809381484985, 35.76839542388916, 30.136964082717896, 31.53676700592041, 31.165133237838745, 31.350500106811523, 32.417800188064575, 36.97373008728027, 30.9931697845459, 29.99861788749695, 34.90587782859802, 34.65718936920166, 30.961527824401855, 29.908247709274292, 30.967023372650146, 30.55945897102356, 30.496167182922363, 28.370348930358887, 28.70312738418579, 28.32119870185852]
    a = np.array(mobilenet_2)
    print("inception_2:", a.mean(),a.size)
    VGG_2 = [54.363009452819824, 32.60130977630615, 31.32314372062683, 28.648732900619507, 29.10626196861267, 30.91254758834839, 29.749316215515137, 30.916844367980957, 29.37466263771057, 29.101590156555176, 29.907581090927124, 29.441990852355957, 30.945318937301636, 30.110599040985107, 29.523221015930176, 29.1269314289093, 29.38863468170166, 29.31118607521057, 28.658745527267456, 28.583422660827637, 29.265647649765015, 27.946793794631958]
    a = np.array(VGG_2)
    print("VGG_2:", a.mean(),a.size)
    efficientNet_2 = [83.50139737129211, 56.98581337928772, 57.53943467140198, 57.52588868141174, 57.440881967544556, 56.449918031692505, 56.46065950393677, 57.901182413101196, 57.68748164176941, 57.705010414123535, 57.76593208312988, 57.68216109275818, 57.0522563457489, 57.03399205207825, 57.417550802230835, 57.364280462265015, 59.6481614112854, 59.90669560432434, 61.29284191131592, 57.73600697517395, 57.05668807029724, 56.55561017990112, 57.095744609832764, 57.16611170768738, 56.72392749786377]
    a = np.array(efficientNet_2)
    print("efficientNet_2:", a.mean(),a.size)
    xception_2 = [54.363009452819824, 32.60130977630615, 31.32314372062683, 28.648732900619507, 29.10626196861267, 30.91254758834839, 29.749316215515137, 30.916844367980957, 29.37466263771057, 29.101590156555176, 29.907581090927124, 29.441990852355957, 30.945318937301636, 30.110599040985107, 29.523221015930176, 29.1269314289093, 29.38863468170166, 29.31118607521057, 28.658745527267456, 28.583422660827637, 29.265647649765015, 27.946793794631958]
    a = np.array(xception_2)
    print("xception_2:", a.mean(),a.size)

def fullTrainingTime():

    ef = np.array([192.1374475955963, 169.0395827293396, 168.01563501358032, 165.74546217918396, 163.3181505203247,
           167.1952772140503, 163.75407218933105, 162.8124063014984, 168.22150588035583, 164.1867709159851])
    print("efficient,", ef.mean(),ef.size)
    inception = np.array([87.09805083274841, 81.63444638252258, 80.94609045982361, 81.23905515670776, 85.7739417552948,
           88.17067265510559, 85.08778715133667, 86.0611207485199, 85.67058205604553, 81.0575807094574,
           82.98951482772827, 84.12196683883667, 84.3204505443573, 82.65225505828857, 80.31659173965454,
           84.05688238143921, 83.5004813671112, 81.98589515686035, 79.29035377502441, 81.34320878982544,
           83.25946235656738])
    print("inception,", inception.mean(),inception.size)
    res = np.array([124.7589967250824, 81.2956063747406, 78.47049760818481, 83.30808067321777, 82.10760283470154,
           82.53103041648865, 88.67770528793335, 83.92786121368408, 84.42251753807068, 83.50846934318542,
           84.11516380310059, 89.68417072296143, 89.38873839378357, 86.51179075241089, 86.2993860244751,
           89.92123031616211, 83.65147018432617, 87.78686571121216, 87.74541878700256, 87.80400371551514,
           84.82112073898315, 85.49164605140686, 84.66969609260559, 85.04014253616333, 83.59109401702881,
           82.523854970932, 81.99607467651367, 82.0006353855133, 90.67622566223145, 93.28402161598206,
           88.98154020309448, 88.95201969146729, 86.90540170669556, 86.52885723114014])
    print("inceptionres,", res.mean(),res.size)

    mob = np.array([83.07330703735352, 76.65458035469055, 79.45470571517944, 77.22818899154663, 77.35642623901367,
           81.25107765197754, 77.92113089561462, 75.02390432357788, 73.09313416481018, 75.31037211418152,
           74.42361688613892, 73.15663528442383, 74.09845924377441, 74.50916957855225, 73.64236378669739,
           75.98033690452576, 71.88339638710022, 70.15142869949341, 70.14002013206482, 70.3916928768158,
           70.14079213142395, 70.20574235916138, 70.39542388916016, 70.34486198425293, 70.21158051490784,
           70.64421105384827])

    print("mob,", mob.mean(), mob.size)
    vgg = np.array( [100.23600006103516, 76.55386209487915, 76.8434100151062, 76.64121723175049, 91.514408826828,
           83.71648621559143, 82.69268727302551, 81.99891543388367, 82.70358633995056, 82.86685919761658,
           81.37272882461548, 78.74281120300293, 78.51476192474365, 78.52611351013184, 78.45156168937683,
           80.08082747459412, 78.03791332244873, 84.30900001525879, 87.59099841117859])
    print("vgg,", vgg.mean(), vgg.size)

    xception = np.array([111.15100169181824, 104.4947817325592, 96.43759560585022, 92.94441437721252, 88.89956498146057, 84.70094323158264, 81.9723117351532, 86.33822822570801, 86.22786951065063, 86.33033394813538, 84.30472350120544, 84.79602146148682, 84.47000575065613, 83.8070867061615, 83.5680935382843, 86.69503617286682, 89.42182040214539, 86.93144631385803, 88.1637933254242, 88.4605917930603, 84.54996252059937, 85.27689456939697, 86.87477135658264, 83.10154581069946, 80.62034797668457, 78.23347520828247, 78.15665483474731])
    print("xception,", xception.mean(), xception.size)

fullTrainingTime()
